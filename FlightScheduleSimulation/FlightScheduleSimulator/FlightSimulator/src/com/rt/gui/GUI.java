package com.rt.gui;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.awt.Color;
import java.util.Date;
import java.util.ArrayList;
import java.util.Calendar;
//import javafx.scene.control.Spinner;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import javax.swing.table.DefaultTableModel;

import com.his.rt.flightsimulation.main.RunwayAllocation;
/**
 *
 * @author MADHUSHREE DEVARAJ
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form t
     */
    public GUI() {
        initComponents();
        getContentPane().setBackground(Color.WHITE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        FlightTable = new javax.swing.JTable();
        BtnSchedule = new javax.swing.JButton();
        status = new javax.swing.JLabel();
        LabelStatus = new javax.swing.JComboBox<>();
        time = new javax.swing.JLabel();
        Date date= new Date();
        SpinnerDateModel sm=
        new SpinnerDateModel(date,null,null,Calendar.HOUR_OF_DAY);
        labelTime = new javax.swing.JSpinner(sm);
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        RunwayCombo = new javax.swing.JComboBox<>();
        noofRun = new javax.swing.JLabel();
        btnPreLoad = new javax.swing.JButton();
        BtnClear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Flight Simulation");

        FlightTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        FlightTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Flight Name", "Status", "Time"
            }
        ));
        FlightTable.getTableHeader().setResizingAllowed(false);
        FlightTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
               // FlightTableMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
               // FlightTableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(FlightTable);

        BtnSchedule.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        BtnSchedule.setText("Schedule");
        BtnSchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnScheduleActionPerformed(evt);
            }
        });

        status.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        status.setText("Status");

        LabelStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Arrival", "Departure" }));

        time.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        time.setText("Time");

        JSpinner.DateEditor de=new JSpinner.DateEditor(labelTime,"HH:mm");
        labelTime.setEditor(de);
        labelTime.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        btnAdd.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnAdd.setText("Add Flights");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        RunwayCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3" }));

        noofRun.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        noofRun.setText("No of Runways");

        btnPreLoad.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnPreLoad.setText("Preload");
        btnPreLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreLoadActionPerformed(evt);
            }
        });

        BtnClear.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        BtnClear.setText("Clear");
        BtnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BtnSchedule, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(242, 242, 242)
                        .addComponent(noofRun, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(LabelStatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(labelTime, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE))
                                    .addGap(53, 53, 53))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(time, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(0, 0, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnPreLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(71, 71, 71)
                        .addComponent(BtnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(RunwayCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(70, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(noofRun, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RunwayCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(status))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(time)
                    .addComponent(labelTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnDelete)
                    .addComponent(btnPreLoad)
                    .addComponent(BtnClear))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addComponent(BtnSchedule)
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>                        

    private void BtnScheduleActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    	
    	if(FlightTable.getRowCount() == 0) {
    		JOptionPane.showMessageDialog(rootPane, "Fligt info table is empty");
    		return;
    	}
    	
    	ArrayList<String> flightList = new ArrayList<String>();
		for (int i = 0; i < FlightTable.getRowCount(); i++) {
			int j;
			String rowData="";
			for (j = 0; j < FlightTable.getColumnCount(); j++) {
				if(rowData == "")
					rowData += FlightTable.getValueAt(i, j).toString();
				else
					rowData += " " + FlightTable.getValueAt(i, j).toString();
			}
			System.out.println(rowData);
			flightList.add(i,rowData);

		}
		int runwayNo = Integer.parseInt((String) RunwayCombo.getSelectedItem());
		new RunwayAllocation(flightList,runwayNo);
		this.setVisible(false);
        
    }                                           

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {     
    	
    	 DefaultTableModel model=(DefaultTableModel) FlightTable.getModel();
    	 
    	 int rowCount = model.getRowCount();			
			Integer id=100;
			if(rowCount >0) {
				int lastRow = rowCount - 1;
				Integer lastId = Integer.parseInt((String) model.getValueAt(lastRow, 0));
				id = lastId+1;
			}
    	 
         //Integer id = FlightTable.getRowCount() + 100;
 				
             
             String m= labelTime.getValue().toString();
             String t= m.substring(11, 16);
             
         model.addRow(new Object[]{Integer.toString(id),LabelStatus.getSelectedItem().toString(),t});

		}
        
       
                                      

                                   

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        DefaultTableModel model=(DefaultTableModel) FlightTable.getModel();
        if(FlightTable.getSelectedRow()==-1)
        {
        if(FlightTable.getRowCount()==0)
        {
            //mess.setText("Table is empty");
            JOptionPane.showMessageDialog(rootPane, "Table is empty");
        }
        else 
        {
          JOptionPane.showMessageDialog(rootPane,"You must select a row");
        }
        }
    else
    {
        model.removeRow(FlightTable.getSelectedRow());
        
    } 
    }                                         

    private void btnPreLoadActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:int rowCount = flightModel.getRowCount();
		// Remove rows one by one from the end of the table
                DefaultTableModel model=(DefaultTableModel) FlightTable.getModel();
                int rowCount = model.getRowCount();
		for (int i = rowCount - 1; i >= 0; i--)
			model.removeRow(i);
		model.addRow(new Object[] { "100", "Arrival", "10:40" });
		model.addRow(new Object[] { "101", "Arrival", "10:42" });
		model.addRow(new Object[] { "102", "Departure", "10:40" });
		model.addRow(new Object[] { "103", "Arrival", "10:45" });
		model.addRow(new Object[] { "104", "Departure", "10:45" });
		model.addRow(new Object[] { "105", "Arrival", "10:40" });
		model.addRow(new Object[] { "106", "Arrival", "10:46" });
		model.addRow(new Object[] { "107", "Arrival", "10:42" });
		model.addRow(new Object[] { "108", "Departure", "10:41" });
		model.addRow(new Object[] { "109", "Arrival", "10:40" });
		model.addRow(new Object[] { "110", "Arrival", "10:42" });
    }                                          

    private void BtnClearActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
     
        DefaultTableModel model=(DefaultTableModel) FlightTable.getModel();
                int rowCount = model.getRowCount();
		// Remove rows one by one from the end of the table
		for (int i = rowCount - 1; i >= 0; i--) {
			model.removeRow(i);
		}
    }                                        

    
    // Variables declaration - do not modify                     
    private javax.swing.JButton BtnClear;
    private javax.swing.JButton BtnSchedule;
    private javax.swing.JTable FlightTable;
    private javax.swing.JComboBox<String> LabelStatus;
    private javax.swing.JComboBox<String> RunwayCombo;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnPreLoad;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner labelTime;
    private javax.swing.JLabel noofRun;
    private javax.swing.JLabel status;
    private javax.swing.JLabel time;
    // End of variables declaration                   
}
